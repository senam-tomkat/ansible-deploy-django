---
- name: Deploy Django web app to EC2
  hosts: your_ec2_hosts_group
  become: yes
  vars:
    # Variables you can override
    project_name: 'example_project'
    virtualenv_name: "{{ project_name }}-venv"
    repo_url: '<github repo link>'
    webapps_dir: "~/webapps"
    virtualenv_path: "{{ webapps_dir }}/{{ virtualenv_name }}"
    project_path: "{{ webapps_dir }}/{{ project_name }}"
    # uWSGI will listen on a Unix socket:
    uwsgi_socket: "/tmp/{{ project_name }}.sock"
    uwsgi_ini: "{{ project_path }}/uwsgi.ini"
    # Supervisor configuration file path:
    supervisor_conf: "/etc/supervisor/conf.d/{{ project_name }}.conf"
    # Environment variables to be passed to uWSGI (and thus your Django app)
    env_vars:
      DJANGO_SETTINGS_MODULE: "{{ project_name }}.settings"
      SECRET_KEY: "CHANGE_ME"   # Change this in production!
      DEBUG: "False"
    # Nginx configuration file (sites-available)
    nginx_conf_path: "/etc/nginx/sites-available/{{ project_name }}.conf"

  tasks:
    - name: Update apt cache and install required packages
      apt:
        update_cache: yes
        name:
          - python3
          - python3-venv
          - python3-pip
          - nginx
          - supervisor
          - git
        state: present

    - name: Ensure webapps directory exists
      file:
        path: "{{ webapps_dir }}"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0755'

    - name: Create Python virtualenv for the project
      command: python3 -m venv "{{ virtualenv_path }}"
      args:
        creates: "{{ virtualenv_path }}/bin/activate"
      become: false

    - name: Clone the project repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ project_path }}"
        version: "HEAD"
        force: yes
      become: false

    - name: Install Python requirements from requirements.txt
      pip:
        requirements: "{{ project_path }}/requirements.txt"
        virtualenv: "{{ virtualenv_path }}"
        virtualenv_python: python3
      become: false

    - name: Install uWSGI in the virtualenv
      pip:
        name: uwsgi
        virtualenv: "{{ virtualenv_path }}"
        virtualenv_python: python3
      become: false

    - name: Create uWSGI configuration file (INI format)
      copy:
        dest: "{{ uwsgi_ini }}"
        content: |
          [uwsgi]
          # Change to your project directory
          chdir = {{ project_path }}
          # The Python WSGI module to import
          module = {{ project_name }}.wsgi:application
          # Use the virtualenv
          home = {{ virtualenv_path }}
          # uWSGI master process settings
          master = true
          processes = 4
          # Listen on a Unix socket
          socket = {{ uwsgi_socket }}
          chmod-socket = 664
          vacuum = true
          die-on-term = true
      become: false

    - name: Create Supervisor configuration for uWSGI process
      copy:
        dest: "{{ supervisor_conf }}"
        content: |
          [program:{{ project_name }}]
          command={{ virtualenv_path }}/bin/uwsgi --ini {{ uwsgi_ini }}
          directory={{ project_path }}
          autostart=true
          autorestart=true
          stopsignal=QUIT
          user={{ ansible_env.USER }}
          environment={{ env_vars | dict2items | map('join', '=') | join(',') }}
          stdout_logfile=/var/log/{{ project_name }}_uwsgi.log
          stderr_logfile=/var/log/{{ project_name }}_uwsgi_err.log
      notify:
        - reload supervisor

    - name: Create Nginx configuration for the project
      copy:
        dest: "{{ nginx_conf_path }}"
        content: |
          upstream {{ project_name }}_uwsgi {
              server unix:{{ uwsgi_socket }};
          }

          server {
              listen 80;
              server_name _;

              location / {
                  include uwsgi_params;
                  uwsgi_pass {{ project_name }}_uwsgi;
              }

              # Serve static files (adjust path if needed)
              location /static/ {
                  alias {{ project_path }}/static/;
              }
          }
      notify:
        - reload nginx

    - name: Enable Nginx site by creating a symlink
      file:
        src: "{{ nginx_conf_path }}"
        dest: "/etc/nginx/sites-enabled/{{ project_name }}.conf"
        state: link
      notify:
        - reload nginx

    - name: Remove default Nginx site if it exists
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - reload nginx

    - name: Run Django migrations
      command: "{{ virtualenv_path }}/bin/python manage.py migrate"
      args:
        chdir: "{{ project_path }}"
      become: false

    - name: Collect static files
      command: "{{ virtualenv_path }}/bin/python manage.py collectstatic --noinput"
      args:
        chdir: "{{ project_path }}"
      become: false

  handlers:
    - name: reload supervisor
      command: >
        supervisorctl reread &&
        supervisorctl update &&
        supervisorctl restart {{ project_name }}

    - name: reload nginx
      service:
        name: nginx
        state: reloaded
